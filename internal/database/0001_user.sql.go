// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_user.sql

package database

import (
	"context"
	"database/sql"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls("url_id", "original_url", "short_url", "user_id", "created_at") VALUES($1, $2, $3, $4, $5)
RETURNING url_id, original_url, short_url, user_id, created_at
`

type CreateURLParams struct {
	UrlID       int32
	OriginalUrl string
	ShortUrl    string
	UserID      int32
	CreatedAt   sql.NullTime
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.UrlID,
		arg.OriginalUrl,
		arg.ShortUrl,
		arg.UserID,
		arg.CreatedAt,
	)
	var i Url
	err := row.Scan(
		&i.UrlID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users("email") VALUES($1)
RETURNING email
`

func (q *Queries) CreateUser(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	err := row.Scan(&email)
	return email, err
}

const getOriginalURL = `-- name: GetOriginalURL :one
SELECT original_url FROM urls WHERE original_url = $1
`

func (q *Queries) GetOriginalURL(ctx context.Context, originalUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getOriginalURL, originalUrl)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}
